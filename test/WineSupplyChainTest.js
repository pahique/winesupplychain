// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
const SupplyChain = artifacts.require('WineSupplyChain')
const BigNumber = require('bignumber.js')

contract('WineSupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    let sku = 1
    let upc = 1
    const ownerID = accounts[0]
    const originProducerID = accounts[1]
    const originProducerName = "Concha y Toro"
    const originProducerInformation = "Valle del Maipo"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    let grapeType = 'Carmenere'
    let harvestDate = 20190505;
    let wineLotID = 1
    let fermentationTankID = 12
    let barrelID = 1
    let numDaysAging = 90
    let bottlingDate = 20190530
    let numBottlesLot = 1000
    let numDaysResting = 120
    let wineLabel = 'Reserva'
    let certification = 'DOCG'
    const productNotes = "Since 1883"
    const productPrice = 5000000
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const certifierID = accounts[5]
    const emptyAddress = '0x0000000000000000000000000000000000000000'
    let tx;

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Producer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])
    console.log("Certifier: accounts[5] ", accounts[5])
    console.log("Extra account: accounts[6] ", accounts[6])

    it("Testing add role", async function() { 
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.addProducer(originProducerID, {from: ownerID})
        await supplyChain.addCertifier(certifierID, {from: ownerID})
        await supplyChain.addDistributor(distributorID, {from: originProducerID})
        await supplyChain.addRetailer(retailerID, {from: distributorID})
        await supplyChain.addConsumer(consumerID, {from: retailerID})
        assert.isTrue(await supplyChain.isProducer(originProducerID));
        assert.isTrue(await supplyChain.isCertifier(certifierID));
        assert.isTrue(await supplyChain.isDistributor(distributorID));
        assert.isTrue(await supplyChain.isRetailer(retailerID));
        assert.isTrue(await supplyChain.isConsumer(consumerID));
    })

    it("Testing add role without permission", async function() { 
        const supplyChain = await SupplyChain.deployed()
        await expectThrow(supplyChain.addProducer(accounts[6], {from: distributorID}));
        await expectThrow(supplyChain.addProducer(accounts[6], {from: retailerID}));
        await expectThrow(supplyChain.addProducer(accounts[6], {from: consumerID}));
        await expectThrow(supplyChain.addProducer(accounts[6], {from: certifierID}));
        await expectThrow(supplyChain.addDistributor(accounts[6], {from: retailerID}));
        await expectThrow(supplyChain.addDistributor(accounts[6], {from: consumerID}));
        await expectThrow(supplyChain.addDistributor(accounts[6], {from: distributorID}));
        await expectThrow(supplyChain.addRetailer(accounts[6], {from: consumerID}));
        await expectThrow(supplyChain.addRetailer(accounts[6], {from: retailerID}));
    })

    it("Testing renounce role", async function() { 
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.addProducer(accounts[6], {from: ownerID});
        assert.isTrue(await supplyChain.isProducer(accounts[6]));
        await supplyChain.renounceProducer({from: accounts[6]});
        assert.isFalse(await supplyChain.isProducer(accounts[6]));

        await supplyChain.addDistributor(accounts[6], {from: ownerID});
        assert.isTrue(await supplyChain.isDistributor(accounts[6]));
        await supplyChain.renounceDistributor({from: accounts[6]});
        assert.isFalse(await supplyChain.isDistributor(accounts[6]));

        await supplyChain.addRetailer(accounts[6], {from: ownerID});
        assert.isTrue(await supplyChain.isRetailer(accounts[6]));
        await supplyChain.renounceRetailer({from: accounts[6]});
        assert.isFalse(await supplyChain.isRetailer(accounts[6]));

        await supplyChain.addConsumer(accounts[6], {from: ownerID});
        assert.isTrue(await supplyChain.isConsumer(accounts[6]));
        await supplyChain.renounceConsumer({from: accounts[6]});
        assert.isFalse(await supplyChain.isConsumer(accounts[6]));

        await supplyChain.addCertifier(accounts[6], {from: ownerID});
        assert.isTrue(await supplyChain.isCertifier(accounts[6]));
        await supplyChain.renounceCertifier({from: accounts[6]});
        assert.isFalse(await supplyChain.isCertifier(accounts[6]));
    })

    it("Testing smart contract function harvestItem() that allows a producer to harvest grapes", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Mark an item as GrapesHarvested by calling function harvestGrapes()
        tx = await supplyChain.harvestGrapes(
            upc, 
            grapeType, 
            originProducerID, 
            originProducerName, 
            originProducerInformation, 
            originFarmLatitude, 
            originFarmLongitude, 
            productNotes, 
            harvestDate, 
            {from: originProducerID}
        )

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        const resultBufferThree = await supplyChain.fetchItemBufferThree.call(upc)        

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originProducerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originProducerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originProducerName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originProducerInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferOne[8], grapeType, 'Error: Invalid grapeType')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
        assert.equal(resultBufferThree[2], harvestDate, 'Error: Invalid harvestDate')
        assert.equal(tx.logs[0].event, 'GrapesHarvested');
        assert.equal(tx.logs[0].args.upc, upc);
        assert.equal(tx.logs[0].args.grapeType, grapeType);
        assert.equal(tx.logs[0].args.harvestDate, harvestDate);
    })    

    it("Testing smart contract function processGrapes() that allows a producer to process grapes", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Mark an item as GrapesProcessed by calling function processGrapes()
        tx = await supplyChain.processGrapes(upc, {from: originProducerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)        

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originProducerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State')
        assert.equal(tx.logs[0].event, 'GrapesProcessed');
        assert.equal(tx.logs[0].args.upc, upc);
    })    

    it("Testing smart contract function bottleUpWine() is not possible before the wine is aged", async() => {
        const supplyChain = await SupplyChain.deployed()
        await expectThrow(supplyChain.bottleUpWine(upc,bottlingDate, numBottlesLot, {from: originProducerID}))
    })

    it("Testing smart contract function produceWine() that allows a producer to produce wine", async() => {
        const supplyChain = await SupplyChain.deployed()
        // Mark an item as WineProduced by calling function produceWine()
        tx = await supplyChain.produceWine(upc, wineLotID, fermentationTankID, {from: originProducerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)        
        const resultBufferThree = await supplyChain.fetchItemBufferThree.call(upc)        

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originProducerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State')
        assert.equal(resultBufferThree[3], wineLotID, 'Error: Invalid wineLotID')
        assert.equal(resultBufferThree[4], fermentationTankID, 'Error: Invalid fermentationTankID')
        assert.equal(tx.logs[0].event, 'WineProduced');
        assert.equal(tx.logs[0].args.upc, upc);
        assert.equal(tx.logs[0].args.wineLotID, wineLotID);
        assert.equal(tx.logs[0].args.fermentationTankID, fermentationTankID);
    })    

    it("Testing smart contract function ageWine() that allows a producer to age wine", async() => {
        const supplyChain = await SupplyChain.deployed()
        // Mark an item as WineAged by calling function ageWine()
        tx = await supplyChain.ageWine(upc, barrelID, numDaysAging, {from: originProducerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)        
        const resultBufferThree = await supplyChain.fetchItemBufferThree.call(upc)        

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originProducerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State')
        assert.equal(resultBufferThree[5], barrelID, 'Error: Invalid barrelID')
        assert.equal(resultBufferThree[6], numDaysAging, 'Error: Invalid numDaysAging')
        assert.equal(tx.logs[0].event, 'WineAged');
        assert.equal(tx.logs[0].args.upc, upc);
        assert.equal(tx.logs[0].args.barrelID, barrelID);
        assert.equal(tx.logs[0].args.numDaysAging, numDaysAging);
    })    

    it("Testing smart contract function bottleUpWine() that allows a producer to bottle up wine", async() => {
        const supplyChain = await SupplyChain.deployed()
        // Mark an item as WineBottled by calling function bottleUpWine()
        tx = await supplyChain.bottleUpWine(upc, bottlingDate, numBottlesLot, {from: originProducerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)        
        const resultBufferThree = await supplyChain.fetchItemBufferThree.call(upc)        

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originProducerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State')
        assert.equal(resultBufferThree[7], bottlingDate, 'Error: Invalid bottlingDate')
        assert.equal(resultBufferThree[8], numBottlesLot, 'Error: Invalid numBottlesLot')
        assert.equal(tx.logs[0].event, 'WineBottled');
        assert.equal(tx.logs[0].args.upc, upc);
        assert.equal(tx.logs[0].args.bottlingDate, bottlingDate);
        assert.equal(tx.logs[0].args.numBottlesLot, numBottlesLot);
    })    

    it("Testing smart contract function restWine() that allows a producer to rest wine", async() => {
        const supplyChain = await SupplyChain.deployed()
        // Mark an item as WineRested by calling function restWine()
        tx = await supplyChain.restWine(upc, numDaysResting, {from: originProducerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)        
        const resultBufferThree = await supplyChain.fetchItemBufferThree.call(upc)        

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originProducerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State')
        assert.equal(resultBufferThree[9], numDaysResting, 'Error: Invalid numDaysResting')
        assert.equal(tx.logs[0].event, 'WineRested');
        assert.equal(tx.logs[0].args.upc, upc);
        assert.equal(tx.logs[0].args.numDaysResting, numDaysResting);
    })    

    it("Testing smart contract function labelWine() that allows a producer to label wine", async() => {
        const supplyChain = await SupplyChain.deployed()
        // Certifies producer first
        await supplyChain.certifyWine(originProducerID, wineLabel, certification, {from: certifierID})
        // Mark an item as WineLabeled by calling function labelWine()
        tx = await supplyChain.labelWine(upc, wineLabel, {from: originProducerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)        
        const resultBufferThree = await supplyChain.fetchItemBufferThree.call(upc)        

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originProducerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[2], wineLabel, 'Error: Invalid wineLabel')
        assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], certifierID, 'Error: Invalid certifierID')
        assert.equal(resultBufferThree[10], certification, 'Error: Invalid certification')
        assert.equal(tx.logs[0].event, 'WineLabeled');
        assert.equal(tx.logs[0].args.upc, upc);
        assert.equal(tx.logs[0].args.wineLabel, wineLabel);
        assert.equal(tx.logs[0].args.certification, certification);
    })    

    it("Testing smart contract function packWine() that allows a producer to pack wine", async() => {
        const supplyChain = await SupplyChain.deployed()
        // Mark an item as WinePacked by calling function packWine()
        tx = await supplyChain.packWine(upc, {from: originProducerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)        
    
        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originProducerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State')
        assert.equal(tx.logs[0].event, 'WinePacked');
        assert.equal(tx.logs[0].args.upc, upc);
    })    

    it("Testing smart contract function sellWine() that allows a producer to sell wine", async() => {
        const supplyChain = await SupplyChain.deployed()
        // Mark an item as WineForSale by calling function sellWine()
        tx = await supplyChain.sellWine(upc, productPrice, {from: originProducerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)        

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originProducerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid productPrice')
        assert.equal(resultBufferTwo[5], 8, 'Error: Invalid item State')
        assert.equal(tx.logs[0].event, 'WineForSale');
        assert.equal(tx.logs[0].args.upc, upc);
        assert.equal(tx.logs[0].args.price, productPrice);
    })    

    it("Testing smart contract function buyWine() without enough funds", async() => {
        const supplyChain = await SupplyChain.deployed()
        let amount = 4000000

        await expectThrow(supplyChain.buyWine(upc, {from: distributorID, value: amount}));

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)        

        // Verify the result set
        assert.equal(resultBufferTwo[5], 8, 'Error: Invalid item State')
    })    

    it("Testing smart contract function buyWine() that allows a distributor to buy wine", async() => {
        const supplyChain = await SupplyChain.deployed()
        let amount = 6000000
        let change = 1000000
        let balanceBefore = await web3.eth.getBalance(distributorID);
        // Mark an item as WineSold by calling function buyWine()
        tx = await supplyChain.buyWine(upc, {from: distributorID, value: amount})
        //console.log(tx);
        let balanceAfter = await web3.eth.getBalance(distributorID);
        let txData = await web3.eth.getTransaction(tx.tx);
        //console.log(txData);
        const receipt = await web3.eth.getTransactionReceipt(tx.tx);
        let gasPrice = new BigNumber(txData.gasPrice);
        let gasUsed = new BigNumber(receipt.gasUsed);
        const gasCost = gasPrice.multipliedBy(gasUsed);        
        assert.equal(balanceBefore, (BigNumber(balanceAfter)).plus(gasCost).plus(BigNumber(amount)).minus(BigNumber(change)).toNumber());

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)        

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid productPrice')
        assert.equal(resultBufferTwo[5], 9, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[7], distributorID, 'Error: Invalid distributorID')
        assert.equal(tx.logs[0].event, 'WineSold');
        assert.equal(tx.logs[0].args.upc, upc);
    })    

    it("Testing smart contract function shipWine() that allows a distributor to ship wine", async() => {
        const supplyChain = await SupplyChain.deployed()
        // Mark an item as WineShipped by calling function shipWine()
        tx = await supplyChain.shipWine(upc, {from: distributorID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)        

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[5], 10, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[7], distributorID, 'Error: Invalid distributorID')
        assert.equal(tx.logs[0].event, 'WineShipped');
        assert.equal(tx.logs[0].args.upc, upc);
    })    

    it("Testing smart contract function receiveWine() that allows a retailer to mark wine received", async() => {
        const supplyChain = await SupplyChain.deployed()
        // Mark an item as WineReceived by calling function receiveWine()
        tx = await supplyChain.receiveWine(upc, {from: retailerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)        

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], retailerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[5], 11, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[8], retailerID, 'Error: Invalid retailerID')
        assert.equal(tx.logs[0].event, 'WineReceived');
        assert.equal(tx.logs[0].args.upc, upc);
    })    

    it("Testing smart contract function purchaseWine() that allows a consumer to purchase wine", async() => {
        const supplyChain = await SupplyChain.deployed()
        // Mark an item as WinePurchased by calling function purchaseWine()
        tx = await supplyChain.purchaseWine(upc, {from: consumerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)        

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[5], 12, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[9], consumerID, 'Error: Invalid consumerID')
        assert.equal(tx.logs[0].event, 'WinePurchased');
        assert.equal(tx.logs[0].args.upc, upc);
    })    

    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        
        // Verify the result set:
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')        
        assert.equal(resultBufferOne[3], originProducerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originProducerName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originProducerInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferOne[8], grapeType, 'Error: Invalid grapeType')
    })

    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        // Verify the result set:
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], wineLabel, 'Error: Missing or Invalid wineLabel')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Missing or Invalid productPrice')
        assert.equal(resultBufferTwo[5], 12, 'Error: Missing or Invalid itemState')
        assert.equal(resultBufferTwo[6], certifierID, 'Error: Missing or Invalid certifierID')
        assert.equal(resultBufferTwo[7], distributorID, 'Error: Missing or Invalid distributorID')
        assert.equal(resultBufferTwo[8], retailerID, 'Error: Missing or Invalid retailerID')
        assert.equal(resultBufferTwo[9], consumerID, 'Error: Missing or Invalid consumerID')
    })

    it("Testing smart contract function fetchItemBufferThree() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferThree = await supplyChain.fetchItemBufferThree.call(upc)
               
        // Verify the result set:
        assert.equal(resultBufferThree[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferThree[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferThree[2], harvestDate, 'Error: Missing or Invalid harvestDate')
        assert.equal(resultBufferThree[3], wineLotID, 'Error: Missing or Invalid wineLotID')
        assert.equal(resultBufferThree[4], fermentationTankID, 'Error: Missing or Invalid fermentationTankID')
        assert.equal(resultBufferThree[5], barrelID, 'Error: Missing or Invalid barrelID')
        assert.equal(resultBufferThree[6], numDaysAging, 'Error: Missing or Invalid numDaysAging')
        assert.equal(resultBufferThree[7], bottlingDate, 'Error: Missing or Invalid bottlingDate')
        assert.equal(resultBufferThree[8], numBottlesLot, 'Error: Missing or Invalid numBottlesLot')
        assert.equal(resultBufferThree[9], numDaysResting, 'Error: Missing or Invalid numDaysResting')
        assert.equal(resultBufferThree[10], certification, 'Error: Missing or Invalid certification')
    })

});


let expectThrow = async function(promise) {
    try {
        await promise;
    } catch(error) {
        assert.exists(error);
        return;
    }
    assert.fail("Expected an error but didn't see one");
}

