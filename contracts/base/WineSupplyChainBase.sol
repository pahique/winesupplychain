pragma solidity ^0.5.0;

import '../accesscontrol/AccessControl.sol';

contract WineSupplyChainBase is AccessControl {

    // Define enum 'State' with the following values:
    enum State { 
        GrapesHarvested,  // 0
        GrapesProcessed,  // 1
        WineProduced,     // 2
        WineAged,         // 3
        WineBottled,      // 4
        WineRested,       // 5
        WineLabeled,      // 6
        WinePacked,       // 7
        WineForSale,      // 8
        WineSold,         // 9
        WineShipped,      // 10
        WineReceived,     // 11
        WinePurchased     // 12
    }

    // Define a struct 'Item' with the following fields:
    struct Wine {
        uint      sku;  // Stock Keeping Unit (SKU)
        uint      upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
        address   ownerID;  // Metamask-Ethereum address of the current owner as the product moves through stages
        State     itemState;  // State as represented in the enum above
        address   payable originProducerID; // Metamask-Ethereum address of the Producer
        string    originProducerName; // Producer Name (winery name)
        string    originProducerInformation;  // Producer Information
        string    originFarmLatitude;   // Farm Latitude
        string    originFarmLongitude;  // Farm Longitude
        string    grapeType;  // Grape type (ex: Merlot, Cabernet Sauvignon, Chardonnay, etc)
        uint      harvestDate; // Date when the grapes were harvested (format YYYYMMDD)
        string    harvestNotes; // Extra info, like the location of the vineyards harvested, grapes total weight  
        uint      wineLotID;      // ID of the wine lot
        uint      fermentationTankID;   // ID of the tank used in the fermentation process
        uint      barrelID;             // ID of the barrel used in the aging process
        uint      numDaysAging;         // Number of days aging
        uint      bottlingDate;  // Date when the wine was bottled up
        uint      numBottlesLot;  // Number of bottles in this lot
        uint      numDaysResting;       // Number of days resting
        string    wineLabel;     // Label/type of the wine
        string    wineInformation;  // Extra information like alcohol per volume, wine type, year, etc
        string    certification;     // Certification labels (ex: IGT, IGP, DOC, DOP, DEMETER, etc)
        uint      price;  // Price
        string    imageHash; // Picture of the product
        address payable certifierID;  // Metamask-Ethereum address of the Certifier
        address payable distributorID;  // Metamask-Ethereum address of the Distributor
        address payable retailerID; // Metamask-Ethereum address of the Retailer
        address payable consumerID; // Metamask-Ethereum address of the Consumer
    }

    struct Certification {
        address payable certifierID;
        string certification;
    }

    // Define events with the same state values and accept 'upc' as input argument
    event GrapesHarvested(uint indexed upc, string grapeType, uint harvestDate);
    event GrapesProcessed(uint indexed upc);
    event WineProduced(uint indexed  upc, uint wineLotID, uint fermentationTankID);
    event WineAged(uint indexed upc, uint barrelID, uint numDaysAging);
    event WineBottled(uint indexed upc, uint bottlingDate, uint numBottlesLot);
    event WineRested(uint indexed upc, uint numDaysResting);
    event WineLabeled(uint indexed upc, string wineLabel, string certification);
    event WinePacked(uint indexed upc);
    event WineForSale(uint indexed upc, uint price);
    event WineSold(uint indexed upc);
    event WineShipped(uint indexed upc);
    event WineReceived(uint indexed upc);
    event WinePurchased(uint indexed upc);


}